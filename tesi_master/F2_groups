import json
import math

def main():

    # Riprese for groups of three rimanti in OF

    # Importing the json files and opening it as a python list
    # Inferno
    inferno = open('tesi_master/json_files/rimanti_json/inferno_rimanti.json')
    inferno_rimanti_list = json.load(inferno)

    # Purgtorio
    purgatorio = open('tesi_master/json_files/rimanti_json/purgatorio_rimanti.json')
    purgatorio_rimanti_list = json.load(purgatorio)

    # Paradiso
    paradiso = open('tesi_master/json_files/rimanti_json/paradiso_rimanti.json')
    paradiso_rimanti_list = json.load(paradiso)

    # Orlando Furioso
    OrlandoFurioso = open('tesi_master/json_files/rimanti_json/orlando_rimanti.json')
    of_rimanti_list = json.load(OrlandoFurioso)

    # Creating a comprehensive list of all the rimantis in Dante's Divina Commedia
    dante_canti = []
    dante_rimanti = []
    for canto in inferno_rimanti_list:
        dante_canti.append(canto)
        for sub_list in canto: 
            dante_rimanti.append(sub_list)
    for canto in purgatorio_rimanti_list:
        dante_canti.append(canto)
        for sub_list in canto: 
            dante_rimanti.append(sub_list)
    for canto in paradiso_rimanti_list:
        dante_canti.append(canto)
        for sub_list in canto: 
            dante_rimanti.append(sub_list)

    # Separating the groups of two rimanti's from the rest, first for the Divina Commedia than for the Orlando Furioso
    dante_two_rimanti = []
    for rimanti in dante_rimanti:
        if len(rimanti) == 2:
            dante_two_rimanti.append(sorted(rimanti))
    #print(len(dante_two_rimanti))
    # 200

    dante_two_rimanti_double = []
    for rimanti in dante_rimanti:
        if len(rimanti) == 2:
            if rimanti[0] == rimanti [1]:
                dante_two_rimanti_double.append(rimanti)
    #print(len(dante_two_rimanti_double))
    #print(dante_two_rimanti_double)
    #1

    a_two_rimanti = []
    for canto in of_rimanti_list:
        for sub_list in canto:
            if len(sub_list) == 2:
                a_two_rimanti.append(sorted(sub_list))
    #print(len(a_two_rimanti))
    # 4842

    # See if any of the groups of two rimanti is made of the same word
    a_two_rimanti_double = []
    for canto in of_rimanti_list:
        for sub_list in canto:
            if len(sub_list) == 2:
                if sub_list[0] == sub_list[1]:
                    a_two_rimanti_double.append(sub_list)
    #print(len(a_two_rimanti_double))
    #print(a_two_rimanti_double)
    # 25

    d_three_rimanti = []
    for rimanti in dante_rimanti:
        if len(rimanti) == 3:
            d_three_rimanti.append(sorted(rimanti))

    d_set_group_three = set(tuple(i) for i in d_three_rimanti)
    d_list_set = list(d_set_group_three)
    #print(d_list_set)
    #print(len(d_list_set))
    # 4089

    # Calculating the total number of groups of three rimanti in Orlando Furioso
    of_three_rimanti = []
    number_of_three_rimanti_of = 0
    for canto in of_rimanti_list:
        for sub_list in canto: 
            if len(sub_list) == 3:
                number_of_three_rimanti_of += 1
                of_three_rimanti.append(sorted(sub_list))
    #print(number_of_three_rimanti_of)
    # The number is 9684

    # No repetitions, a set of sorted rimanti
    set_group_three = set(tuple(i) for i in of_three_rimanti)
    of_list_set = list(set_group_three)
    #print(len(of_list_set))
    # 9025 --> not sorted
    # 7824 sorted

    ######## Group A: a group of three rimanti in Ariosto are also in Dante ######

    # Calculating the number of riprese of Dante by Ariosto for complete groups of three
    three_rimanti_sorted = []
    for of_sublist in of_list_set:
        for d_sublist in dante_rimanti:
            if sorted(of_sublist) == sorted(d_sublist):
                three_rimanti_sorted.append(sorted(of_sublist))
                break
    #print(len(three_rimanti_sorted))
    # 406

    ######## Groub B: a group of three of Ariosto shares two words from a group of three in Dante #####
    minus_groupA = []
    for sublist in of_list_set:
        if sorted(sublist) not in three_rimanti_sorted:
            minus_groupA.append(sublist)
    #print(len(minus_groupA))
    # 7418

    three_same_words = []
    for sublist in minus_groupA:
        if sublist[0] == sublist [1] == sublist[2]:
            three_same_words.append(sublist)
    #print(len(three_same_words))
    # 19

    minus_three_same = []
    for sublist in minus_groupA:
        if sublist not in three_same_words:
                minus_three_same.append(sublist)
    print(len(minus_three_same))
    # 7399

    two_same_words = []
    for sublist in minus_three_same:
        if sublist[0] == sublist [1] or sublist[0] == sublist [2] or sublist[2] == sublist [1]:
            two_same_words.append(sublist)
    print(len(two_same_words))
    # 189

    list_a = []
    for a_sublist in three_same_words:
        for d_sublist in d_list_set:
            if a_sublist[0] == d_sublist[0] == d_sublist[1] or  a_sublist[0] == d_sublist[1] == d_sublist[2] or  a_sublist[0] == d_sublist[0] == d_sublist[2]:
                list_a.append(a_sublist)
                break
    print(len(list_a))
    # 4

    list_b = []
    for a_sublist in two_same_words:
            for dante_sublist in d_list_set:
                if (a_sublist[0] == a_sublist[1] == dante_sublist[0] == dante_sublist[1]) or (a_sublist[0] == a_sublist[1] == dante_sublist[2] == dante_sublist[1]) or (a_sublist[1] == a_sublist[2] == dante_sublist[0] == dante_sublist[1]) or (a_sublist[1] == a_sublist[2] == dante_sublist[1] == dante_sublist[2]):
                    list_b.append(a_sublist)
                    break
                elif ((a_sublist[0] == a_sublist[1] and a_sublist[2] in dante_sublist and a_sublist[0] in dante_sublist) or (a_sublist[1] == a_sublist[2] and a_sublist[0] in dante_sublist and a_sublist[1] in dante_sublist)):
                    list_b.append(a_sublist)
                    break
    print(len(list_b))
    # 111
    set_list_b = set(tuple(i) for i in list_b)
    print(len(set_list_b))
    # 111

    # So up until now the not matched groups of three should be, in total 7418 - 4 - 111 = 7315
    minus_lists_ab = []
    for sub_tuple in minus_groupA:
        if sub_tuple not in list_a and sub_tuple not in list_b:
            minus_lists_ab.append(sub_tuple)
    print(len(minus_lists_ab))
    # 7303

    # Groups of three rimanti made of three different words, to compare to the groups of three rimanti in Dante
    minus_three_two_same = []
    for sub_tuple in minus_groupA:
        if sub_tuple not in three_same_words and sub_tuple not in two_same_words:
            minus_three_two_same.append(sub_tuple)
    print(len(minus_three_two_same))
    # 7210

    # A group made of three different words partially corresponds to a group of three in Dante
    list_c = []
    for sub_tuple in minus_three_two_same:
        for dante_sublist in d_list_set:
            if (sub_tuple[0] in dante_sublist and sub_tuple[1] in dante_sublist) or (sub_tuple[0] in dante_sublist and sub_tuple[2] in dante_sublist) or (sub_tuple[1] in dante_sublist and sub_tuple[2] in dante_sublist):
                list_c.append(sub_tuple)
                break
    print(len(list_c))
    # 3100

    ##### Group C: A group of three rimanti in Ariosto shares two words with a groop of two in Dante #######

    #### Group D: A group of two rimanti appears in Ariosto and Dante #######

    #### Group E: A group of two rimanti in Ariosto shares it's two words with a group of three in Dante #####

    ##### Group F: Noting is shared between the two ######

if __name__ == "__main__":
    main()